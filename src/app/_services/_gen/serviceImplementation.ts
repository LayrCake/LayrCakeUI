/*------------------------------------------------------------------------------
<auto-generated>
     This code was generated by a tool.
	    Code originates from EA Uml ClassTemplate.t4
     Changes to this file will be lost if the code is regenerated.
	    Code Generated Date: 	06 May 2017
	    ProjectModel: 			MedicsAway
	    Requested Namespace:	Model$1. Presentation Model$LayrCake$LayrCake$Models$Implementation
</auto-generated>
------------------------------------------------------------------------------*/
import { Injectable } from '@angular/core';
import { Http, Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/throw';
import { Observer } from 'rxjs/Observer';
import 'rxjs/add/operator/map'; 
import 'rxjs/add/operator/catch';

import { IAspNetUser, ICompany, IDDDAttribute, IDDDElement, IDDDLayer, IDDDLayerTemplate, IDDDMethod, IDDDPackage, IDDDPackageToPackageLink, IDDDProject, IDDDProperty, IDDDSolution, IDDDSolutionToPackageLink, IMerchantProblemDomainLink, IProblemDomain, IProblemDomainSolutionLink, IProfile, IUser, IPagedResults } from '_models/_gen/modelInterfaces';
@Injectable()
export class BaseDataService {
     baseUrl: string = 'http://13.93.125.180:8731';

	aspNetUsersBaseUrl : string = this.baseUrl + '/tables/aspnetuser';
	companiesBaseUrl : string = this.baseUrl + '/tables/company';
	dDDAttributesBaseUrl : string = this.baseUrl + '/tables/dddattribute';
	dDDElementsBaseUrl : string = this.baseUrl + '/tables/dddelement';
	dDDLayersBaseUrl : string = this.baseUrl + '/tables/dddlayer';
	dDDLayerTemplatesBaseUrl : string = this.baseUrl + '/tables/dddlayertemplate';
	dDDMethodsBaseUrl : string = this.baseUrl + '/tables/dddmethod';
	dDDPackagesBaseUrl : string = this.baseUrl + '/tables/dddpackage';
	dDDPackageToPackageLinksBaseUrl : string = this.baseUrl + '/tables/dddpackagetopackagelink';
	dDDProjectsBaseUrl : string = this.baseUrl + '/tables/dddproject';
	dDDPropertiesBaseUrl : string = this.baseUrl + '/tables/dddproperty';
	dDDSolutionsBaseUrl : string = this.baseUrl + '/tables/dddsolution';
	dDDSolutionToPackageLinksBaseUrl : string = this.baseUrl + '/tables/dddsolutiontopackagelink';
	merchantProblemDomainLinksBaseUrl : string = this.baseUrl + '/tables/merchantproblemdomainlink';
	problemDomainsBaseUrl : string = this.baseUrl + '/tables/problemdomain';
	problemDomainSolutionLinksBaseUrl : string = this.baseUrl + '/tables/problemdomainsolutionlink';
	profilesBaseUrl : string = this.baseUrl + '/tables/profile';
	usersBaseUrl : string = this.baseUrl + '/tables/user';

	constructor(public http: Http) { }

	getAspNetUsers() : Observable<IAspNetUser[]> {
	      return this.http.get(this.aspNetUsersBaseUrl)
	             .map((res: Response) => {
	                 let aspNetUsers = res.json();
	                 return aspNetUsers;
	             })
	             .catch(this.handleError);
	}
	getAspNetUsersPage(page: number, pageSize: number) : Observable<IPagedResults<IAspNetUser[]>> {
	      return this.http.get(`${this.aspNetUsersBaseUrl}/page/${page}/${pageSize}`)
	             .map((res: Response) => {
	                 const totalRecords = +res.headers.get('X-InlineCount');
	                 let aspNetUsers = res.json();
	                 return {
	                     results: aspNetUsers,
	                     totalRecords: totalRecords
	                 };
	             })
	             .catch(this.handleError);
	}
	getAspNetUser(id: number) : Observable<IAspNetUser> {
	      return this.http.get(this.aspNetUsersBaseUrl + '/' + id)
	             .map((res: Response) => {
	                 let aspNetUser = res.json();
	                 return aspNetUser;
	             })
	             .catch(this.handleError);
	}
	insertAspNetUser(aspNetUser: IAspNetUser) : Observable<IAspNetUser> {
	      return this.http.post(this.aspNetUsersBaseUrl, aspNetUser)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	updateAspNetUser(aspNetUser: IAspNetUser) : Observable<boolean> {
	      return this.http.put(this.aspNetUsersBaseUrl + '/' + aspNetUser.id, aspNetUser)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	deleteAspNetUser(id: number) : Observable<boolean> {
	      return this.http.delete(this.aspNetUsersBaseUrl + '/' + id)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	
	getCompanies() : Observable<ICompany[]> {
	      return this.http.get(this.companiesBaseUrl)
	             .map((res: Response) => {
	                 let companies = res.json();
	                 return companies;
	             })
	             .catch(this.handleError);
	}
	getCompaniesPage(page: number, pageSize: number) : Observable<IPagedResults<ICompany[]>> {
	      return this.http.get(`${this.companiesBaseUrl}/page/${page}/${pageSize}`)
	             .map((res: Response) => {
	                 const totalRecords = +res.headers.get('X-InlineCount');
	                 let companies = res.json();
	                 return {
	                     results: companies,
	                     totalRecords: totalRecords
	                 };
	             })
	             .catch(this.handleError);
	}
	getCompany(id: number) : Observable<ICompany> {
	      return this.http.get(this.companiesBaseUrl + '/' + id)
	             .map((res: Response) => {
	                 let company = res.json();
	                 return company;
	             })
	             .catch(this.handleError);
	}
	insertCompany(company: ICompany) : Observable<ICompany> {
	      return this.http.post(this.companiesBaseUrl, company)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	updateCompany(company: ICompany) : Observable<boolean> {
	      return this.http.put(this.companiesBaseUrl + '/' + company.id, company)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	deleteCompany(id: number) : Observable<boolean> {
	      return this.http.delete(this.companiesBaseUrl + '/' + id)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	
	getDDDAttributes() : Observable<IDDDAttribute[]> {
	      return this.http.get(this.dDDAttributesBaseUrl)
	             .map((res: Response) => {
	                 let dDDAttributes = res.json();
	                 return dDDAttributes;
	             })
	             .catch(this.handleError);
	}
	getDDDAttributesPage(page: number, pageSize: number) : Observable<IPagedResults<IDDDAttribute[]>> {
	      return this.http.get(`${this.dDDAttributesBaseUrl}/page/${page}/${pageSize}`)
	             .map((res: Response) => {
	                 const totalRecords = +res.headers.get('X-InlineCount');
	                 let dDDAttributes = res.json();
	                 return {
	                     results: dDDAttributes,
	                     totalRecords: totalRecords
	                 };
	             })
	             .catch(this.handleError);
	}
	getDDDAttribute(id: number) : Observable<IDDDAttribute> {
	      return this.http.get(this.dDDAttributesBaseUrl + '/' + id)
	             .map((res: Response) => {
	                 let dDDAttribute = res.json();
	                 return dDDAttribute;
	             })
	             .catch(this.handleError);
	}
	insertDDDAttribute(dDDAttribute: IDDDAttribute) : Observable<IDDDAttribute> {
	      return this.http.post(this.dDDAttributesBaseUrl, dDDAttribute)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	updateDDDAttribute(dDDAttribute: IDDDAttribute) : Observable<boolean> {
	      return this.http.put(this.dDDAttributesBaseUrl + '/' + dDDAttribute.id, dDDAttribute)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	deleteDDDAttribute(id: number) : Observable<boolean> {
	      return this.http.delete(this.dDDAttributesBaseUrl + '/' + id)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	
	getDDDElements() : Observable<IDDDElement[]> {
	      return this.http.get(this.dDDElementsBaseUrl)
	             .map((res: Response) => {
	                 let dDDElements = res.json();
	                 return dDDElements;
	             })
	             .catch(this.handleError);
	}
	getDDDElementsPage(page: number, pageSize: number) : Observable<IPagedResults<IDDDElement[]>> {
	      return this.http.get(`${this.dDDElementsBaseUrl}/page/${page}/${pageSize}`)
	             .map((res: Response) => {
	                 const totalRecords = +res.headers.get('X-InlineCount');
	                 let dDDElements = res.json();
	                 return {
	                     results: dDDElements,
	                     totalRecords: totalRecords
	                 };
	             })
	             .catch(this.handleError);
	}
	getDDDElement(id: number) : Observable<IDDDElement> {
	      return this.http.get(this.dDDElementsBaseUrl + '/' + id)
	             .map((res: Response) => {
	                 let dDDElement = res.json();
	                 return dDDElement;
	             })
	             .catch(this.handleError);
	}
	insertDDDElement(dDDElement: IDDDElement) : Observable<IDDDElement> {
	      return this.http.post(this.dDDElementsBaseUrl, dDDElement)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	updateDDDElement(dDDElement: IDDDElement) : Observable<boolean> {
	      return this.http.put(this.dDDElementsBaseUrl + '/' + dDDElement.id, dDDElement)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	deleteDDDElement(id: number) : Observable<boolean> {
	      return this.http.delete(this.dDDElementsBaseUrl + '/' + id)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	
	getDDDLayers() : Observable<IDDDLayer[]> {
	      return this.http.get(this.dDDLayersBaseUrl)
	             .map((res: Response) => {
	                 let dDDLayers = res.json();
	                 return dDDLayers;
	             })
	             .catch(this.handleError);
	}
	getDDDLayersPage(page: number, pageSize: number) : Observable<IPagedResults<IDDDLayer[]>> {
	      return this.http.get(`${this.dDDLayersBaseUrl}/page/${page}/${pageSize}`)
	             .map((res: Response) => {
	                 const totalRecords = +res.headers.get('X-InlineCount');
	                 let dDDLayers = res.json();
	                 return {
	                     results: dDDLayers,
	                     totalRecords: totalRecords
	                 };
	             })
	             .catch(this.handleError);
	}
	getDDDLayer(id: number) : Observable<IDDDLayer> {
	      return this.http.get(this.dDDLayersBaseUrl + '/' + id)
	             .map((res: Response) => {
	                 let dDDLayer = res.json();
	                 return dDDLayer;
	             })
	             .catch(this.handleError);
	}
	insertDDDLayer(dDDLayer: IDDDLayer) : Observable<IDDDLayer> {
	      return this.http.post(this.dDDLayersBaseUrl, dDDLayer)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	updateDDDLayer(dDDLayer: IDDDLayer) : Observable<boolean> {
	      return this.http.put(this.dDDLayersBaseUrl + '/' + dDDLayer.id, dDDLayer)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	deleteDDDLayer(id: number) : Observable<boolean> {
	      return this.http.delete(this.dDDLayersBaseUrl + '/' + id)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	
	getDDDLayerTemplates() : Observable<IDDDLayerTemplate[]> {
	      return this.http.get(this.dDDLayerTemplatesBaseUrl)
	             .map((res: Response) => {
	                 let dDDLayerTemplates = res.json();
	                 return dDDLayerTemplates;
	             })
	             .catch(this.handleError);
	}
	getDDDLayerTemplatesPage(page: number, pageSize: number) : Observable<IPagedResults<IDDDLayerTemplate[]>> {
	      return this.http.get(`${this.dDDLayerTemplatesBaseUrl}/page/${page}/${pageSize}`)
	             .map((res: Response) => {
	                 const totalRecords = +res.headers.get('X-InlineCount');
	                 let dDDLayerTemplates = res.json();
	                 return {
	                     results: dDDLayerTemplates,
	                     totalRecords: totalRecords
	                 };
	             })
	             .catch(this.handleError);
	}
	getDDDLayerTemplate(id: number) : Observable<IDDDLayerTemplate> {
	      return this.http.get(this.dDDLayerTemplatesBaseUrl + '/' + id)
	             .map((res: Response) => {
	                 let dDDLayerTemplate = res.json();
	                 return dDDLayerTemplate;
	             })
	             .catch(this.handleError);
	}
	insertDDDLayerTemplate(dDDLayerTemplate: IDDDLayerTemplate) : Observable<IDDDLayerTemplate> {
	      return this.http.post(this.dDDLayerTemplatesBaseUrl, dDDLayerTemplate)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	updateDDDLayerTemplate(dDDLayerTemplate: IDDDLayerTemplate) : Observable<boolean> {
	      return this.http.put(this.dDDLayerTemplatesBaseUrl + '/' + dDDLayerTemplate.id, dDDLayerTemplate)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	deleteDDDLayerTemplate(id: number) : Observable<boolean> {
	      return this.http.delete(this.dDDLayerTemplatesBaseUrl + '/' + id)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	
	getDDDMethods() : Observable<IDDDMethod[]> {
	      return this.http.get(this.dDDMethodsBaseUrl)
	             .map((res: Response) => {
	                 let dDDMethods = res.json();
	                 return dDDMethods;
	             })
	             .catch(this.handleError);
	}
	getDDDMethodsPage(page: number, pageSize: number) : Observable<IPagedResults<IDDDMethod[]>> {
	      return this.http.get(`${this.dDDMethodsBaseUrl}/page/${page}/${pageSize}`)
	             .map((res: Response) => {
	                 const totalRecords = +res.headers.get('X-InlineCount');
	                 let dDDMethods = res.json();
	                 return {
	                     results: dDDMethods,
	                     totalRecords: totalRecords
	                 };
	             })
	             .catch(this.handleError);
	}
	getDDDMethod(id: number) : Observable<IDDDMethod> {
	      return this.http.get(this.dDDMethodsBaseUrl + '/' + id)
	             .map((res: Response) => {
	                 let dDDMethod = res.json();
	                 return dDDMethod;
	             })
	             .catch(this.handleError);
	}
	insertDDDMethod(dDDMethod: IDDDMethod) : Observable<IDDDMethod> {
	      return this.http.post(this.dDDMethodsBaseUrl, dDDMethod)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	updateDDDMethod(dDDMethod: IDDDMethod) : Observable<boolean> {
	      return this.http.put(this.dDDMethodsBaseUrl + '/' + dDDMethod.id, dDDMethod)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	deleteDDDMethod(id: number) : Observable<boolean> {
	      return this.http.delete(this.dDDMethodsBaseUrl + '/' + id)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	
	getDDDPackages() : Observable<IDDDPackage[]> {
	      return this.http.get(this.dDDPackagesBaseUrl)
	             .map((res: Response) => {
	                 let dDDPackages = res.json();
	                 return dDDPackages;
	             })
	             .catch(this.handleError);
	}
	getDDDPackagesPage(page: number, pageSize: number) : Observable<IPagedResults<IDDDPackage[]>> {
	      return this.http.get(`${this.dDDPackagesBaseUrl}/page/${page}/${pageSize}`)
	             .map((res: Response) => {
	                 const totalRecords = +res.headers.get('X-InlineCount');
	                 let dDDPackages = res.json();
	                 return {
	                     results: dDDPackages,
	                     totalRecords: totalRecords
	                 };
	             })
	             .catch(this.handleError);
	}
	getDDDPackage(id: number) : Observable<IDDDPackage> {
	      return this.http.get(this.dDDPackagesBaseUrl + '/' + id)
	             .map((res: Response) => {
	                 let dDDPackage = res.json();
	                 return dDDPackage;
	             })
	             .catch(this.handleError);
	}
	insertDDDPackage(dDDPackage: IDDDPackage) : Observable<IDDDPackage> {
	      return this.http.post(this.dDDPackagesBaseUrl, dDDPackage)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	updateDDDPackage(dDDPackage: IDDDPackage) : Observable<boolean> {
	      return this.http.put(this.dDDPackagesBaseUrl + '/' + dDDPackage.id, dDDPackage)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	deleteDDDPackage(id: number) : Observable<boolean> {
	      return this.http.delete(this.dDDPackagesBaseUrl + '/' + id)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	
	getDDDPackageToPackageLinks() : Observable<IDDDPackageToPackageLink[]> {
	      return this.http.get(this.dDDPackageToPackageLinksBaseUrl)
	             .map((res: Response) => {
	                 let dDDPackageToPackageLinks = res.json();
	                 return dDDPackageToPackageLinks;
	             })
	             .catch(this.handleError);
	}
	getDDDPackageToPackageLinksPage(page: number, pageSize: number) : Observable<IPagedResults<IDDDPackageToPackageLink[]>> {
	      return this.http.get(`${this.dDDPackageToPackageLinksBaseUrl}/page/${page}/${pageSize}`)
	             .map((res: Response) => {
	                 const totalRecords = +res.headers.get('X-InlineCount');
	                 let dDDPackageToPackageLinks = res.json();
	                 return {
	                     results: dDDPackageToPackageLinks,
	                     totalRecords: totalRecords
	                 };
	             })
	             .catch(this.handleError);
	}
	getDDDPackageToPackageLink(id: number) : Observable<IDDDPackageToPackageLink> {
	      return this.http.get(this.dDDPackageToPackageLinksBaseUrl + '/' + id)
	             .map((res: Response) => {
	                 let dDDPackageToPackageLink = res.json();
	                 return dDDPackageToPackageLink;
	             })
	             .catch(this.handleError);
	}
	insertDDDPackageToPackageLink(dDDPackageToPackageLink: IDDDPackageToPackageLink) : Observable<IDDDPackageToPackageLink> {
	      return this.http.post(this.dDDPackageToPackageLinksBaseUrl, dDDPackageToPackageLink)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	updateDDDPackageToPackageLink(dDDPackageToPackageLink: IDDDPackageToPackageLink) : Observable<boolean> {
	      return this.http.put(this.dDDPackageToPackageLinksBaseUrl + '/' + dDDPackageToPackageLink.id, dDDPackageToPackageLink)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	deleteDDDPackageToPackageLink(id: number) : Observable<boolean> {
	      return this.http.delete(this.dDDPackageToPackageLinksBaseUrl + '/' + id)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	
	getDDDProjects() : Observable<IDDDProject[]> {
	      return this.http.get(this.dDDProjectsBaseUrl)
	             .map((res: Response) => {
	                 let dDDProjects = res.json();
	                 return dDDProjects;
	             })
	             .catch(this.handleError);
	}
	getDDDProjectsPage(page: number, pageSize: number) : Observable<IPagedResults<IDDDProject[]>> {
	      return this.http.get(`${this.dDDProjectsBaseUrl}/page/${page}/${pageSize}`)
	             .map((res: Response) => {
	                 const totalRecords = +res.headers.get('X-InlineCount');
	                 let dDDProjects = res.json();
	                 return {
	                     results: dDDProjects,
	                     totalRecords: totalRecords
	                 };
	             })
	             .catch(this.handleError);
	}
	getDDDProject(id: number) : Observable<IDDDProject> {
	      return this.http.get(this.dDDProjectsBaseUrl + '/' + id)
	             .map((res: Response) => {
	                 let dDDProject = res.json();
	                 return dDDProject;
	             })
	             .catch(this.handleError);
	}
	insertDDDProject(dDDProject: IDDDProject) : Observable<IDDDProject> {
	      return this.http.post(this.dDDProjectsBaseUrl, dDDProject)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	updateDDDProject(dDDProject: IDDDProject) : Observable<boolean> {
	      return this.http.put(this.dDDProjectsBaseUrl + '/' + dDDProject.id, dDDProject)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	deleteDDDProject(id: number) : Observable<boolean> {
	      return this.http.delete(this.dDDProjectsBaseUrl + '/' + id)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	
	getDDDProperties() : Observable<IDDDProperty[]> {
	      return this.http.get(this.dDDPropertiesBaseUrl)
	             .map((res: Response) => {
	                 let dDDProperties = res.json();
	                 return dDDProperties;
	             })
	             .catch(this.handleError);
	}
	getDDDPropertiesPage(page: number, pageSize: number) : Observable<IPagedResults<IDDDProperty[]>> {
	      return this.http.get(`${this.dDDPropertiesBaseUrl}/page/${page}/${pageSize}`)
	             .map((res: Response) => {
	                 const totalRecords = +res.headers.get('X-InlineCount');
	                 let dDDProperties = res.json();
	                 return {
	                     results: dDDProperties,
	                     totalRecords: totalRecords
	                 };
	             })
	             .catch(this.handleError);
	}
	getDDDProperty(id: number) : Observable<IDDDProperty> {
	      return this.http.get(this.dDDPropertiesBaseUrl + '/' + id)
	             .map((res: Response) => {
	                 let dDDProperty = res.json();
	                 return dDDProperty;
	             })
	             .catch(this.handleError);
	}
	insertDDDProperty(dDDProperty: IDDDProperty) : Observable<IDDDProperty> {
	      return this.http.post(this.dDDPropertiesBaseUrl, dDDProperty)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	updateDDDProperty(dDDProperty: IDDDProperty) : Observable<boolean> {
	      return this.http.put(this.dDDPropertiesBaseUrl + '/' + dDDProperty.id, dDDProperty)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	deleteDDDProperty(id: number) : Observable<boolean> {
	      return this.http.delete(this.dDDPropertiesBaseUrl + '/' + id)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	
	getDDDSolutions() : Observable<IDDDSolution[]> {
	      return this.http.get(this.dDDSolutionsBaseUrl)
	             .map((res: Response) => {
	                 let dDDSolutions = res.json();
	                 return dDDSolutions;
	             })
	             .catch(this.handleError);
	}
	getDDDSolutionsPage(page: number, pageSize: number) : Observable<IPagedResults<IDDDSolution[]>> {
	      return this.http.get(`${this.dDDSolutionsBaseUrl}/page/${page}/${pageSize}`)
	             .map((res: Response) => {
	                 const totalRecords = +res.headers.get('X-InlineCount');
	                 let dDDSolutions = res.json();
	                 return {
	                     results: dDDSolutions,
	                     totalRecords: totalRecords
	                 };
	             })
	             .catch(this.handleError);
	}
	getDDDSolution(id: number) : Observable<IDDDSolution> {
	      return this.http.get(this.dDDSolutionsBaseUrl + '/' + id)
	             .map((res: Response) => {
	                 let dDDSolution = res.json();
	                 return dDDSolution;
	             })
	             .catch(this.handleError);
	}
	insertDDDSolution(dDDSolution: IDDDSolution) : Observable<IDDDSolution> {
	      return this.http.post(this.dDDSolutionsBaseUrl, dDDSolution)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	updateDDDSolution(dDDSolution: IDDDSolution) : Observable<boolean> {
	      return this.http.put(this.dDDSolutionsBaseUrl + '/' + dDDSolution.id, dDDSolution)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	deleteDDDSolution(id: number) : Observable<boolean> {
	      return this.http.delete(this.dDDSolutionsBaseUrl + '/' + id)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	
	getDDDSolutionToPackageLinks() : Observable<IDDDSolutionToPackageLink[]> {
	      return this.http.get(this.dDDSolutionToPackageLinksBaseUrl)
	             .map((res: Response) => {
	                 let dDDSolutionToPackageLinks = res.json();
	                 return dDDSolutionToPackageLinks;
	             })
	             .catch(this.handleError);
	}
	getDDDSolutionToPackageLinksPage(page: number, pageSize: number) : Observable<IPagedResults<IDDDSolutionToPackageLink[]>> {
	      return this.http.get(`${this.dDDSolutionToPackageLinksBaseUrl}/page/${page}/${pageSize}`)
	             .map((res: Response) => {
	                 const totalRecords = +res.headers.get('X-InlineCount');
	                 let dDDSolutionToPackageLinks = res.json();
	                 return {
	                     results: dDDSolutionToPackageLinks,
	                     totalRecords: totalRecords
	                 };
	             })
	             .catch(this.handleError);
	}
	getDDDSolutionToPackageLink(id: number) : Observable<IDDDSolutionToPackageLink> {
	      return this.http.get(this.dDDSolutionToPackageLinksBaseUrl + '/' + id)
	             .map((res: Response) => {
	                 let dDDSolutionToPackageLink = res.json();
	                 return dDDSolutionToPackageLink;
	             })
	             .catch(this.handleError);
	}
	insertDDDSolutionToPackageLink(dDDSolutionToPackageLink: IDDDSolutionToPackageLink) : Observable<IDDDSolutionToPackageLink> {
	      return this.http.post(this.dDDSolutionToPackageLinksBaseUrl, dDDSolutionToPackageLink)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	updateDDDSolutionToPackageLink(dDDSolutionToPackageLink: IDDDSolutionToPackageLink) : Observable<boolean> {
	      return this.http.put(this.dDDSolutionToPackageLinksBaseUrl + '/' + dDDSolutionToPackageLink.id, dDDSolutionToPackageLink)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	deleteDDDSolutionToPackageLink(id: number) : Observable<boolean> {
	      return this.http.delete(this.dDDSolutionToPackageLinksBaseUrl + '/' + id)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	
	getMerchantProblemDomainLinks() : Observable<IMerchantProblemDomainLink[]> {
	      return this.http.get(this.merchantProblemDomainLinksBaseUrl)
	             .map((res: Response) => {
	                 let merchantProblemDomainLinks = res.json();
	                 return merchantProblemDomainLinks;
	             })
	             .catch(this.handleError);
	}
	getMerchantProblemDomainLinksPage(page: number, pageSize: number) : Observable<IPagedResults<IMerchantProblemDomainLink[]>> {
	      return this.http.get(`${this.merchantProblemDomainLinksBaseUrl}/page/${page}/${pageSize}`)
	             .map((res: Response) => {
	                 const totalRecords = +res.headers.get('X-InlineCount');
	                 let merchantProblemDomainLinks = res.json();
	                 return {
	                     results: merchantProblemDomainLinks,
	                     totalRecords: totalRecords
	                 };
	             })
	             .catch(this.handleError);
	}
	getMerchantProblemDomainLink(id: number) : Observable<IMerchantProblemDomainLink> {
	      return this.http.get(this.merchantProblemDomainLinksBaseUrl + '/' + id)
	             .map((res: Response) => {
	                 let merchantProblemDomainLink = res.json();
	                 return merchantProblemDomainLink;
	             })
	             .catch(this.handleError);
	}
	insertMerchantProblemDomainLink(merchantProblemDomainLink: IMerchantProblemDomainLink) : Observable<IMerchantProblemDomainLink> {
	      return this.http.post(this.merchantProblemDomainLinksBaseUrl, merchantProblemDomainLink)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	updateMerchantProblemDomainLink(merchantProblemDomainLink: IMerchantProblemDomainLink) : Observable<boolean> {
	      return this.http.put(this.merchantProblemDomainLinksBaseUrl + '/' + merchantProblemDomainLink.id, merchantProblemDomainLink)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	deleteMerchantProblemDomainLink(id: number) : Observable<boolean> {
	      return this.http.delete(this.merchantProblemDomainLinksBaseUrl + '/' + id)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	
	getProblemDomains() : Observable<IProblemDomain[]> {
	      return this.http.get(this.problemDomainsBaseUrl)
	             .map((res: Response) => {
	                 let problemDomains = res.json();
	                 return problemDomains;
	             })
	             .catch(this.handleError);
	}
	getProblemDomainsPage(page: number, pageSize: number) : Observable<IPagedResults<IProblemDomain[]>> {
	      return this.http.get(`${this.problemDomainsBaseUrl}/page/${page}/${pageSize}`)
	             .map((res: Response) => {
	                 const totalRecords = +res.headers.get('X-InlineCount');
	                 let problemDomains = res.json();
	                 return {
	                     results: problemDomains,
	                     totalRecords: totalRecords
	                 };
	             })
	             .catch(this.handleError);
	}
	getProblemDomain(id: number) : Observable<IProblemDomain> {
	      return this.http.get(this.problemDomainsBaseUrl + '/' + id)
	             .map((res: Response) => {
	                 let problemDomain = res.json();
	                 return problemDomain;
	             })
	             .catch(this.handleError);
	}
	insertProblemDomain(problemDomain: IProblemDomain) : Observable<IProblemDomain> {
	      return this.http.post(this.problemDomainsBaseUrl, problemDomain)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	updateProblemDomain(problemDomain: IProblemDomain) : Observable<boolean> {
	      return this.http.put(this.problemDomainsBaseUrl + '/' + problemDomain.id, problemDomain)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	deleteProblemDomain(id: number) : Observable<boolean> {
	      return this.http.delete(this.problemDomainsBaseUrl + '/' + id)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	
	getProblemDomainSolutionLinks() : Observable<IProblemDomainSolutionLink[]> {
	      return this.http.get(this.problemDomainSolutionLinksBaseUrl)
	             .map((res: Response) => {
	                 let problemDomainSolutionLinks = res.json();
	                 return problemDomainSolutionLinks;
	             })
	             .catch(this.handleError);
	}
	getProblemDomainSolutionLinksPage(page: number, pageSize: number) : Observable<IPagedResults<IProblemDomainSolutionLink[]>> {
	      return this.http.get(`${this.problemDomainSolutionLinksBaseUrl}/page/${page}/${pageSize}`)
	             .map((res: Response) => {
	                 const totalRecords = +res.headers.get('X-InlineCount');
	                 let problemDomainSolutionLinks = res.json();
	                 return {
	                     results: problemDomainSolutionLinks,
	                     totalRecords: totalRecords
	                 };
	             })
	             .catch(this.handleError);
	}
	getProblemDomainSolutionLink(id: number) : Observable<IProblemDomainSolutionLink> {
	      return this.http.get(this.problemDomainSolutionLinksBaseUrl + '/' + id)
	             .map((res: Response) => {
	                 let problemDomainSolutionLink = res.json();
	                 return problemDomainSolutionLink;
	             })
	             .catch(this.handleError);
	}
	insertProblemDomainSolutionLink(problemDomainSolutionLink: IProblemDomainSolutionLink) : Observable<IProblemDomainSolutionLink> {
	      return this.http.post(this.problemDomainSolutionLinksBaseUrl, problemDomainSolutionLink)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	updateProblemDomainSolutionLink(problemDomainSolutionLink: IProblemDomainSolutionLink) : Observable<boolean> {
	      return this.http.put(this.problemDomainSolutionLinksBaseUrl + '/' + problemDomainSolutionLink.id, problemDomainSolutionLink)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	deleteProblemDomainSolutionLink(id: number) : Observable<boolean> {
	      return this.http.delete(this.problemDomainSolutionLinksBaseUrl + '/' + id)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	
	getProfiles() : Observable<IProfile[]> {
	      return this.http.get(this.profilesBaseUrl)
	             .map((res: Response) => {
	                 let profiles = res.json();
	                 return profiles;
	             })
	             .catch(this.handleError);
	}
	getProfilesPage(page: number, pageSize: number) : Observable<IPagedResults<IProfile[]>> {
	      return this.http.get(`${this.profilesBaseUrl}/page/${page}/${pageSize}`)
	             .map((res: Response) => {
	                 const totalRecords = +res.headers.get('X-InlineCount');
	                 let profiles = res.json();
	                 return {
	                     results: profiles,
	                     totalRecords: totalRecords
	                 };
	             })
	             .catch(this.handleError);
	}
	getProfile(id: number) : Observable<IProfile> {
	      return this.http.get(this.profilesBaseUrl + '/' + id)
	             .map((res: Response) => {
	                 let profile = res.json();
	                 return profile;
	             })
	             .catch(this.handleError);
	}
	insertProfile(profile: IProfile) : Observable<IProfile> {
	      return this.http.post(this.profilesBaseUrl, profile)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	updateProfile(profile: IProfile) : Observable<boolean> {
	      return this.http.put(this.profilesBaseUrl + '/' + profile.id, profile)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	deleteProfile(id: number) : Observable<boolean> {
	      return this.http.delete(this.profilesBaseUrl + '/' + id)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	
	getUsers() : Observable<IUser[]> {
	      return this.http.get(this.usersBaseUrl)
	             .map((res: Response) => {
	                 let users = res.json();
	                 return users;
	             })
	             .catch(this.handleError);
	}
	getUsersPage(page: number, pageSize: number) : Observable<IPagedResults<IUser[]>> {
	      return this.http.get(`${this.usersBaseUrl}/page/${page}/${pageSize}`)
	             .map((res: Response) => {
	                 const totalRecords = +res.headers.get('X-InlineCount');
	                 let users = res.json();
	                 return {
	                     results: users,
	                     totalRecords: totalRecords
	                 };
	             })
	             .catch(this.handleError);
	}
	getUser(id: number) : Observable<IUser> {
	      return this.http.get(this.usersBaseUrl + '/' + id)
	             .map((res: Response) => {
	                 let user = res.json();
	                 return user;
	             })
	             .catch(this.handleError);
	}
	insertUser(user: IUser) : Observable<IUser> {
	      return this.http.post(this.usersBaseUrl, user)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	updateUser(user: IUser) : Observable<boolean> {
	      return this.http.put(this.usersBaseUrl + '/' + user.id, user)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	deleteUser(id: number) : Observable<boolean> {
	      return this.http.delete(this.usersBaseUrl + '/' + id)
	             .map((res: Response) => res.json())
	             .catch(this.handleError);
	}
	

	handleError(error: any) {
	     console.error('server error:', error);
	     if (error instanceof Response) {
	         let errMessage = '';
	         try {
	             errMessage = error.json().error;
	         } catch(err) {
	             errMessage = error.statusText;
	         }
	         return Observable.throw(errMessage);
	     }
	     return Observable.throw(error || 'Node.js server error');
	}
}
